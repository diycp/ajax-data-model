{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///adm.jquery.min.js","webpack:///webpack/bootstrap 704360d6146dad05103b","webpack:///./src/adm.jquery.js","webpack:///./src/common/settings.js","webpack:///./src/common/cache-helper.js","webpack:///./src/common/DataCache.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","requestAjax","config","callback","errCallback","fnCB","url","console","trace","$","Deferred","reject","data","btnWaiting","waiting","_settings2","fnWaiting","dataType","test","search","window","location","host","fnBeforeAjax","ajax","extend","type","ajaxParam","done","result","fnAjaxDone","res","isFunction","fail","err","fnAjaxFail","always","Object","defineProperty","value","_settings","_cacheHelper","get","_this","cacheName","cacheData","$promise","isString","getCacheDataByName","fromCache","resolve","cache","Number","code","save","hasOwnProperty","saveTOCache","delete","RegExp","deleteCacheDataByName","getAll","cacheType","cacheStor","getCacheStor","item","key","_cache","indexOf","cachePrefix","replace","JSON","parse","e","clear","setCachePrefix","prefix","arguments","length","undefined","warn","setSettings","setting","alert","msg","wait","isEnd","$btn","setTimeout","html","defaultText","removeClass","prop","text","addClass","$d","tipConfig","message","status","reload","errAlert","responseText","statusText","adjustCacheName","encodeURIComponent","dataCache","getItem","slice","removeItem","setItem","stringify","_typeof","Symbol","iterator","constructor","_DataCache","_DataCache2","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","protoProps","staticProps","prototype","DataCache"],"mappings":"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","file":"adm.jquery.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"adm\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"adm\"] = factory();\n\telse\n\t\troot[\"adm\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"adm\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"adm\"] = factory();\n\telse\n\t\troot[\"adm\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file 全局数据模型 model\n\t * 提供数据的读取、保存/缓存、删除、更新等操作。各模块 model 可继承该模型，以进行模块范围内的数据存取操作。\n\t * @module adm\n\t * @author lizhiwen@meizu.com\n\t * @since 2016-03-31 - 2016-08-16\n\t *\n\t * @example\n\t * import adm from 'ajax-data-model';\n\t * let upsModel = $.extend(true, {}, adm, {aa: 'ccc', restapi: {task_type: '/rest/task/type'}});\n\t * // 支持的方法：upsModel.get、upsModel.save、upsModel.delete、upsModel.clear\n\t * // 配置了 url，则都返回 Promise 对象，不管是否缓存\n\t * upsModel.get({url: '/rest/xxx'}).done().fail().then();\n\t * // 保存数据到 localStorage 中\n\t * upsModel.save('appList', [{music: 'test'}], 'localStorage');\n\t * // 通过名字获取，返回存储的数据或者 undefined\n\t * upsModel.get('appList');\n\t * upsModel.get('appList', 'localStorage');\n\t *\n\t * @example\n\t * // 获取 task_type 数据，并缓存到 sessionStorage。获取时优先从 sessionStorage 读取\n\t * DW.adm.get({\n\t *     url: upsModel.restapi.task_type,\n\t *     cache: 'sessionStorage',\n\t *     fromCache: 'sessionStorage',\n\t *     cacheName: 'task_dependType'\n\t * }).done((result) => {\n\t *     let taskTypeList = result.value || [];\n\t *     console.log(taskTypeList);\n\t * });\n\t */\n\t'use strict';\n\t\n\t// import $ from 'jquery';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _settings = __webpack_require__(2);\n\t\n\tvar _settings2 = _interopRequireDefault(_settings);\n\t\n\tvar _cacheHelper = __webpack_require__(3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * ajax 请求通用方法\n\t * @param {Object}   config - 请求参数配置\n\t * @param {String}   config.url - ajax url，必须存在，`config.ajaxParam` 中配置此参数无效\n\t * @param {Object}   config.ajaxParam - ajax 额外参数扩展，如涉及文件上传等\n\t * @param {Object}   config.data - ajax 请求的参数\n\t * @param {Object}   config.waiting - 用于传递给 settings.fnWaiting 方法使用的参数配置\n\t * @param {Object}   config.tipConfig[true] - ajax 出错时的提示配置。配置为 false 时，禁用全局的系统提示，包括 成功/出错/404/50x 等\n\t * @param {Object}   config.errAlert[true] - ajax error 时是否给出全局提示\n\t * @param {Function} callback - ajax 请求成功时回调\n\t * @param {Function} errCallback - ajax 请求失败或 code !== 200 时回调\n\t * @param {Object}   param - 传递给 ajax 请求的额外参数\n\t * @param {Function} fnCB - 请求到数据之后的立即回调方法，用于请求成功后需要前置处理的情况\n\t * @return {Object}  ajax - $.Deferred，用于自定义回调处理。注意：ajax 请求的 done/fail 回调，与 callback/errCallback 有区别，不会处理 code 是否为 200！\n\t */\n\tfunction requestAjax(config, callback, errCallback, fnCB) {\n\t    if (!config.url || typeof config.url !== 'string') {\n\t        console.trace('请求 URL API 不存在，或格式不对：', config.url);\n\t        return $.Deferred().reject('请求 URL API 不存在，或格式不对：', config.url);\n\t    }\n\t\n\t    // data.btnWaiting 的兼容，应使用 config.waiting 参数\n\t    if (config.data && config.data.btnWaiting) {\n\t        config.waiting = config.waiting || config.data.btnWaiting;\n\t        delete config.data.btnWaiting;\n\t    }\n\t\n\t    // ajax 请求前处理\n\t    if (config.waiting) {\n\t        _settings2.default.fnWaiting(config.waiting);\n\t    }\n\t\n\t    // jsonp 兼容\n\t    var dataType = 'json';\n\t\n\t    if (/^https?:\\/\\//.test(config.url) && config.url.search(window.location.host) === -1) {\n\t        dataType = 'jsonp';\n\t    }\n\t\n\t    // 请求前回调\n\t    if (_settings2.default.fnBeforeAjax) {\n\t        _settings2.default.fnBeforeAjax(config);\n\t    }\n\t\n\t    var ajax = $.ajax($.extend(true, {\n\t        type: 'GET',\n\t        dataType: dataType\n\t    }, config.ajaxParam, {\n\t        url: config.url,\n\t        data: config.data\n\t    })).done(function (result) {\n\t        return _settings2.default.fnAjaxDone(result, function (res) {\n\t            if ($.isFunction(fnCB)) {\n\t                fnCB(result);\n\t            }\n\t\n\t            if ($.isFunction(callback)) {\n\t                callback(res);\n\t            }\n\t        }, errCallback, config);\n\t    }).fail(function (err) {\n\t        _settings2.default.fnAjaxFail(err, config);\n\t\n\t        if ($.isFunction(errCallback)) {\n\t            errCallback(err);\n\t        }\n\t    }).always(function () {\n\t        if (config.waiting) {\n\t            _settings2.default.fnWaiting(config.waiting, true);\n\t        }\n\t    });\n\t\n\t    return ajax; // 返回 Promise 对象\n\t}\n\t\n\t/**\n\t * 全局数据模型 model\n\t * @alias module:adm\n\t * @type {Object}\n\t */\n\texports.default = {\n\t    /**\n\t     * 数据获取，可为远程url、缓存等\n\t     * @param {Object} config 为字符串时，从缓存中读取数据，否则为从远程获取数据，参数如下：\n\t     * ```js\n\t     * {\n\t     *     url: '',\n\t     *     data: {},         // url 请求参数\n\t     *     cache: false,     // 配置了 url 获取数据时，是否缓存数据。可取值：`false/true/sessionStorage/localStorage`\n\t     *     fromCache: false, // 配置了 url，是否首先尝试从缓存中读取数据。可取值：`false/true/sessionStorage/localStorage`\n\t     *     cacheName: 'ddd', // 配置了 url，如果缓存数据，配置其名称，不配置则取值 url (/ 替换为 . 作为深度路径)\n\t     *     tipConfig: {delay: 2000} // ajax 出错时的提示配置。配置为 false 时，禁用全局的系统提示，包括 成功/出错/404/50x 等\n\t     *     errAlert: true    // ajax error 时是否给出全局提示\n\t     *     waiting: {}       // 按钮等待等配置，用于传递给 settings.fnWaiting 方法\n\t     *     ajaxParam: null   // ajax 额外参数扩展，如涉及文件上传等，需要修改部分参数。其中 url 参数无效，应当使用 config.url\n\t     * }\n\t     * ```\n\t     * @param {Object} callback 成功回调方法\n\t     * @param {Object} errCallback 从 url 获取时，失败后需要做一些处理的回调方法\n\t     * }\n\t     */\n\t\n\t    get: function get(config, callback, errCallback) {\n\t        var _this = this;\n\t\n\t        if (!config) {\n\t            return undefined;\n\t        }\n\t\n\t        var cacheName = void 0,\n\t            cacheData = void 0,\n\t            $promise = $.Deferred();\n\t\n\t        if ((0, _cacheHelper.isString)(config)) {\n\t            // 第一个参数为字符串，则为名称，直接返回对应值\n\t            cacheName = config;\n\t        }\n\t\n\t        // 配置了 url，从 url 中获取\n\t        if (config.url) {\n\t            cacheName = config.cacheName || config.url;\n\t            cacheData = (0, _cacheHelper.getCacheDataByName)(cacheName, config.fromCache);\n\t\n\t            // fromCache 为 true，尝试从缓存中获取数据\n\t            if (config.fromCache && cacheData) {\n\t                if ($.isFunction(callback)) {\n\t                    callback(cacheData);\n\t                }\n\t\n\t                $promise.resolve(cacheData);\n\t                // return cacheData; // 返回数据\n\t                return $promise; // 这里改了后不兼容旧的调用，应该注意 bug 的出现！\n\t            }\n\t\n\t            config.ajaxParam = $.extend(config.ajaxParam, {\n\t                type: 'GET'\n\t            });\n\t\n\t            return requestAjax(config, callback, errCallback, function (result) {\n\t                // cache 为 true，缓存数据\n\t                if (config.cache && Number(result.code) === 200) {\n\t                    _this.save(cacheName, result, config.cache);\n\t                }\n\t            });\n\t        } else if (config.hasOwnProperty('url')) {\n\t            // 配置了 url，但 url 值为空\n\t            console.trace('配置了 URL 参数，但值为空：', config);\n\t            $promise.reject('配置了 URL 参数，但值为空', config);\n\t        } else {\n\t            // 未配置 url，则必须配置 cacheName，或者 config 为字符串(作为cacheName)，从缓存中取得数据\n\t            if (!cacheName && config) {\n\t                cacheName = config.cacheName;\n\t            }\n\t            cacheData = (0, _cacheHelper.getCacheDataByName)(cacheName, config.fromCache || callback);\n\t\n\t            if ($.isFunction(callback)) {\n\t                callback(cacheData);\n\t            }\n\t\n\t            return cacheData;\n\t        }\n\t\n\t        return $promise;\n\t    },\n\t\n\t    /**\n\t     * 设置/存储数据\n\t     * @param {Object|String} config - 配置信息。也可以为字符串，则为需存储的数据名称。与 {@link module:adm~get} 的 config 参数相同\n\t     * @param {Function|Object} callback - 存储成功后回调方法。当 config 为字符串时，为需存储的数据，或方法执行后返回要存储的数据\n\t     * @param {Function|String} errCallback - 从 url 获取时，失败后需要做一些处理的回调方法。config 为字符串时，为 cacheType 类型\n\t     * @example\n\t     * // 存储数据到 localStorage，名称为 testdataName\n\t     * adm.save('testdataName', {test: 1}, 'localStorage');\n\t     * @example\n\t     * // 存储数据到远程，同时存储到 sessionStorage\n\t     * adm.save({url: '/rest/dd', data: {test: 1}, cache: 'sessionStorage'});\n\t     */\n\t    save: function save(config, callback, errCallback) {\n\t        if (!config) {\n\t            return '';\n\t        }\n\t\n\t        var cacheName = void 0,\n\t            cacheData = void 0,\n\t            $promise = $.Deferred();\n\t\n\t        if ((0, _cacheHelper.isString)(config)) {\n\t            // config 为字符串，则作为cacheName\n\t            cacheName = '' + config;\n\t            if ($.isFunction(callback)) {\n\t                // 可以存储为回调方法执行后的结果\n\t                (0, _cacheHelper.saveTOCache)(cacheName, callback(), errCallback);\n\t            } else {\n\t                (0, _cacheHelper.saveTOCache)(cacheName, callback, errCallback);\n\t            }\n\t        } else if (config.url) {\n\t            // 配置了 url，将数据存储到远程\n\t            config.ajaxParam = $.extend({\n\t                type: 'POST'\n\t            }, config.ajaxParam);\n\t\n\t            return requestAjax(config, callback, errCallback, function (result) {\n\t                if (config.cache) {\n\t                    cacheName = cacheName || config.url;\n\t                    // 远程存储成功了，本地也需缓存数据时\n\t                    (0, _cacheHelper.saveTOCache)(cacheName, result, config.cache);\n\t                }\n\t            });\n\t        } else if (config.hasOwnProperty('url')) {\n\t            // 配置了url，但 url 值为空\n\t            console.trace('配置了 URL 参数，但值为空：', config);\n\t            $promise.reject('配置了 URL 参数，但值为空', config);\n\t        } else if (config.cacheName) {\n\t            // 没有设置 url，但设置了 cacheName，则保存数据到本地\n\t            (0, _cacheHelper.saveTOCache)(config.cacheName, config.data, config.cache);\n\t\n\t            if ($.isFunction(callback)) {\n\t                callback(cacheData);\n\t            }\n\t        }\n\t\n\t        return $promise;\n\t    },\n\t\n\t    /**\n\t     * 删除一个数据\n\t     * @param {Object} config - 为字符串时，作为 cacheName 尝试从缓存中删除数据。否则格式如下：\n\t     * ```js\n\t     * {\n\t     *     url: '',       // 配置了 url，从远程删除数据，否则从缓存中删除\n\t     *     cache: false,  // 配置了 url，是否还尝试从缓存中删除数据。可取值：false/true/sessionStorage/localStorage\n\t     *     cacheName: ''  // 从缓存中删除数据时，提供其名称。\n\t     * }\n\t     * ```\n\t     */\n\t    delete: function _delete(config, callback, errCallback) {\n\t        if (!config) {\n\t            return '';\n\t        }\n\t\n\t        var $promise = $.Deferred(),\n\t            cacheName = void 0;\n\t\n\t        if ((0, _cacheHelper.isString)(config) || config instanceof RegExp) {\n\t            // 第一个参数为字符串或正则，callback 就是 cacheType\n\t            (0, _cacheHelper.deleteCacheDataByName)(config, callback);\n\t            // 删除完成都返回执行成功\n\t            $promise.resolve();\n\t        } else if (config.url) {\n\t            // 配置了 url，从远程删除数据\n\t            return requestAjax(config, callback, errCallback, {\n\t                type: 'DELETE'\n\t            }, function () {\n\t                if (config.cache) {\n\t                    // 远程删除成功了，本地也需清空时\n\t                    cacheName = config.cacheName || config.url;\n\t                    (0, _cacheHelper.deleteCacheDataByName)(cacheName, config.cache);\n\t                }\n\t            });\n\t        } else if (config.hasOwnProperty('url')) {\n\t            // 配置了url，但 url 值为空\n\t            console.trace('配置了 URL 参数，但值为空：', config);\n\t            $promise.reject('配置了 URL 参数，但值为空', config);\n\t        } else if (config && config.cacheName) {\n\t            (0, _cacheHelper.deleteCacheDataByName)(config.cacheName, config.cache);\n\t            $promise.resolve();\n\t        }\n\t\n\t        return $promise;\n\t    },\n\t\n\t    /**\n\t     * 返回所有存储中的所有数据\n\t     * @param  {String} cacheType 存储的类型：sessionStorage、localStorage 或 memory\n\t     * @return {Object}\n\t     */\n\t    getAll: function getAll(cacheType) {\n\t        var cacheStor = (0, _cacheHelper.getCacheStor)(cacheType);\n\t        var item = void 0,\n\t            key = void 0,\n\t            _cache = {};\n\t\n\t        for (item in cacheStor) {\n\t            if (!cacheStor.hasOwnProperty(item)) {\n\t                continue;\n\t            }\n\t\n\t            if (0 !== item.indexOf(_settings2.default.cachePrefix)) {\n\t                continue;\n\t            }\n\t\n\t            key = item.replace(_settings2.default.cachePrefix, '');\n\t            try {\n\t                _cache[key] = JSON.parse(cacheStor[item]);\n\t            } catch (e) {\n\t                _cache[key] = cacheStor[item];\n\t            }\n\t        }\n\t\n\t        return _cache;\n\t    },\n\t\n\t    /**\n\t     * 根据存储类型清空存储的所有数据\n\t     * @param  {String} cacheType\n\t     * @return {scope} this\n\t     */\n\t    clear: function clear(cacheType) {\n\t        (0, _cacheHelper.deleteCacheDataByName)(new RegExp('.*'), cacheType);\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * 修改缓存数据的前缀\n\t     * @param {String} prefix           以下划线开头，由字母、数字、或下划线组成\n\t     * @param {Boolean} clear[=true]    修改前缀前，是否移除已有的数据\n\t     */\n\t    setCachePrefix: function setCachePrefix(prefix) {\n\t        var clear = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\t\n\t        if (!/^_[_a-zA-Z]*_$/.test(prefix)) {\n\t            console.warn('以下划线开头和结尾，由字母、数字、或下划线组成');\n\t            return this;\n\t        }\n\t\n\t        if (clear) {\n\t            this.clear('sessionStorage');\n\t            this.clear('localStorage');\n\t            this.clear();\n\t        }\n\t\n\t        _settings2.default.cachePrefix = prefix;\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * 设置配置项\n\t     * @param {Object} setting\n\t     */\n\t    setSettings: function setSettings(setting) {\n\t        var item = void 0;\n\t\n\t        for (item in setting) {\n\t            if ('cachePrefix' === item) {\n\t                this.setCachePrefix(setting[item], true);\n\t            } else if (_settings2.default.hasOwnProperty(item)) {\n\t                _settings2.default[item] = setting[item];\n\t            }\n\t        }\n\t\n\t        return _settings2.default;\n\t    }\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/**\n\t * @desc 配置信息，可以通过 `adm.setSettings` 方法修改\n\t * @alias settings\n\t * @type {Object}\n\t */\n\texports.default = {\n\t    cachePrefix: '__DM__', // 缓存数据时使用的前缀\n\t    alert: function alert(msg) {\n\t        // 全局性提示方法注册，可根据项目的 alert 组件进行注册\n\t        console.trace(msg);\n\t        // window.alert(msg);\n\t    },\n\t    /**\n\t     * ajax 开始/结束时的状态处理\n\t     * 例如单击按钮后，在开始时禁用按钮，结束时恢复它；\n\t     * 再例如，在 ajax 开始时启用页面动画，结束时关闭页面动画。\n\t     * @param  {Object}  wait - 来自于 `data.btnWaiting` 参数，参数内容可根据 `fnWaiting` 具体的处理来设置。例如这里为：\n\t     * `{$btn:$btn, text:\"请求中..\", defaultText: \"提交\"}`\n\t     * @param  {Boolean} isEnd - true 时在 ajax 开始调用；为 false 时在 ajax 结束调用\n\t     * @return {void}\n\t     */\n\t    fnWaiting: function fnWaiting(wait, isEnd) {\n\t        if (wait && wait.$btn && wait.$btn.length) {\n\t            if (!isEnd) {\n\t                wait.$btn.data('defaultText', wait.$btn.html()).html(wait.text || '<i class=\"fa fa-spinner rotateIn animated infinite\"></i> 请求中...').addClass('disabled').prop('disabled', true);\n\t            } else {\n\t                setTimeout(function () {\n\t                    // 连续提交延时处理，两次连续提交不能超过 200 ms\n\t                    wait.$btn.html(wait.defaultText || wait.$btn.data('defaultText')).removeClass('disabled').prop('disabled', false);\n\t                }, 200);\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * ajax 请求前回调方法\n\t     * @param  {Object} config - ajax 请求配置，由于是引用传参，可在这里通过修改它实现 mock 数据等功能\n\t     * @return {void}\n\t     */\n\t    fnBeforeAjax: function fnBeforeAjax(config) {},\n\t\n\t    /**\n\t     * 通用 ajax 请求返回处理\n\t     * 对于接口的约定，如这里以 `code` 为 `200` 认为是成功的数据，否则为出错\n\t     * @param {Object} result - ajax 返回的数据结果\n\t     * @param {Function} callback - 成功回调方法\n\t     * @param {Function} errCallback - 出错回调方法\n\t     * @param {Object} config - ajax 请求参数配置，即 `adm.get/save` 的第一个参数\n\t     */\n\t    fnAjaxDone: function fnAjaxDone(result, callback, errCallback, config) {\n\t        var $d = $.Deferred();\n\t\n\t        if (result && result.code === 200) {\n\t            if (callback) {\n\t                callback(result);\n\t            }\n\t\n\t            // code 200 认为成功，否则认为失败\n\t            $d.resolve(result);\n\t        } else {\n\t            $d.reject(result);\n\t\n\t            if (errCallback) {\n\t                errCallback(result);\n\t            }\n\t\n\t            // 设置为 false，则不进行系统提示，适合由用户自定义错误处理的情况\n\t            if (config.tipConfig === false) {\n\t                return $d;\n\t            }\n\t\n\t            result.message = result.message || '系统错误';\n\t            if (config.tipConfig) {\n\t                // 注册另一种系统提示\n\t                // config.tipConfig.message = result.message;\n\t                // MZ.tipmessage.fail(config.tipConfig);\n\t            } else {\n\t                    this.alert(result.message);\n\t                }\n\t        }\n\t\n\t        return $d;\n\t    },\n\t\n\t    /**\n\t     * ajax 失败处理，一般为 30x、40x、50x 或返回格式不对、网络中断等\n\t     * @param  {Object} err\n\t     * @param  {Object} config\n\t     * @return {void}\n\t     */\n\t    fnAjaxFail: function fnAjaxFail(err, config) {\n\t        if (0 === err.status) {\n\t            this.alert('登录超时');\n\t            window.location.reload();\n\t        } else if (false !== config.errAlert) {\n\t            // errAlert = false 时禁止 40x/50x 等错误的全局提示\n\t            this.alert('数据请求失败: ' + (err.responseText || err.statusText));\n\t        }\n\t    }\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }; /**\n\t                                                                                                                                                                                                                                                   * cache helper\n\t                                                                                                                                                                                                                                                   */\n\t\n\t\n\texports.getCacheStor = getCacheStor;\n\texports.getCacheDataByName = getCacheDataByName;\n\texports.deleteCacheDataByName = deleteCacheDataByName;\n\texports.saveTOCache = saveTOCache;\n\texports.isString = isString;\n\t\n\tvar _settings = __webpack_require__(2);\n\t\n\tvar _settings2 = _interopRequireDefault(_settings);\n\t\n\tvar _DataCache = __webpack_require__(4);\n\t\n\tvar _DataCache2 = _interopRequireDefault(_DataCache);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// 缓存数据对象。为了避免混淆，只缓存至一级结构\n\tvar dataCache = new _DataCache2.default();\n\t\n\t/**\n\t * 修正 cacheName\n\t * @param  {String} cacheName 原始的值，可能是任意格式\n\t * @return {String}           修正后的 cacheName，以 cachePrefix 开头\n\t */\n\tfunction adjustCacheName(cacheName) {\n\t    if (!cacheName) {\n\t        return '';\n\t    }\n\t\n\t    cacheName = encodeURIComponent(('' + cacheName).replace(/\\//g, '.').replace(/^\\./, '').replace(/(^\\s+|\\s+$)/g, ''));\n\t    if (cacheName.indexOf(_settings2.default.cachePrefix) !== 0) {\n\t        cacheName = _settings2.default.cachePrefix + cacheName;\n\t    }\n\t\n\t    return cacheName;\n\t}\n\t/**\n\t * 根据 cacheType 取得 cacheStorage 对象\n\t * @param  {String} cacheType\n\t * @return {Object}\n\t */\n\tfunction getCacheStor(cacheType) {\n\t    var cacheStor = dataCache;\n\t\n\t    if ('sessionStorage' === cacheType || 'localStorage' === cacheType) {\n\t        cacheStor = window[cacheType] || dataCache;\n\t    }\n\t\n\t    return cacheStor;\n\t}\n\t/**\n\t * 根据 cacheName 名称层级获取对应 dataCache 中的缓存数据\n\t * @param  {String} cacheName - 名称，以 . 分割层级，如 ups.pa.query.tags.group\n\t * @param  {String} cacheType - 缓存类型：sessionStorage、localStorage 、 memory(默认)\n\t * @return {*}                  返回读取到的数据\n\t */\n\tfunction getCacheDataByName(cacheName, cacheType) {\n\t    var data = void 0,\n\t        cacheStor = getCacheStor(cacheType);\n\t\n\t    if (!(cacheName = adjustCacheName(cacheName))) {\n\t        return data;\n\t    }\n\t\n\t    try {\n\t        data = JSON.parse(cacheStor.getItem(cacheName));\n\t    } catch (e) {\n\t        data = cacheStor.getItem(cacheName);\n\t    }\n\t\n\t    return data || undefined;\n\t}\n\t/**\n\t * 根据 cacheName 名称尝试移除缓存中存在的数据\n\t * @param  {String|RegExp}  cacheName - 名称，以 . 分割层级，如 ups.pa.query.tags.group。支持正则匹配\n\t * @param  {String} cacheType - 缓存类型：sessionStorage、localStorage 、 memory(默认)\n\t * @return {*}\n\t */\n\tfunction deleteCacheDataByName(cacheName, cacheType) {\n\t    var item = void 0,\n\t        cacheStor = getCacheStor(cacheType);\n\t\n\t    // 为正则，支持模糊删除\n\t    if (cacheName instanceof RegExp) {\n\t        for (item in cacheStor) {\n\t            if (!cacheStor.hasOwnProperty(item) || // 自有属性\n\t            item.indexOf(_settings2.default.cachePrefix) !== 0 // 过滤前缀\n\t            ) {\n\t                    continue;\n\t                }\n\t\n\t            // 规则检测\n\t            if (!cacheName.test(item.slice(_settings2.default.cachePrefix.length))) {\n\t                continue;\n\t            }\n\t\n\t            // 符合规则，移除\n\t            cacheStor.removeItem(item);\n\t        }\n\t\n\t        return;\n\t    }\n\t\n\t    // 精确的查找与删除\n\t    if (!(cacheName = adjustCacheName(cacheName))) {\n\t        return;\n\t    }\n\t\n\t    cacheStor.removeItem(cacheName);\n\t}\n\t/**\n\t * 存储数据到本地\n\t * @param {String} cacheName - 用于存储的名称\n\t * @param {*}      data - 任意类型的数据\n\t * @param {String} cacheType - 存储类型，支持三种方式：sessionStorage、localStorage 和内存中(默认)\n\t */\n\tfunction saveTOCache(cacheName, data, cacheType) {\n\t    if (!(cacheName = adjustCacheName(cacheName))) {\n\t        return;\n\t    }\n\t\n\t    var cacheStor = getCacheStor(cacheType);\n\t\n\t    if (cacheStor === dataCache) {\n\t        // 存到内存 dataCache\n\t        dataCache[cacheName] = data;\n\t    } else {\n\t        cacheStor.setItem(cacheName, JSON.stringify(data));\n\t    }\n\t}\n\t\n\t/**\n\t * 是否为类字符串\n\t */\n\tfunction isString(text) {\n\t    var type = typeof text === 'undefined' ? 'undefined' : _typeof(text);\n\t\n\t    if ('string' === type || 'number' === type) {\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * @file 基本的数据缓存类\n\t */\n\t\n\t/**\n\t * 内存缓存数据对象类，与 `localStorage` API 保持一致\n\t */\n\t\n\tvar DataCache = function () {\n\t  function DataCache() {\n\t    _classCallCheck(this, DataCache);\n\t\n\t    this.cache = {};\n\t  }\n\t  /**\n\t   * 获取值\n\t   * @param  {String} key\n\t   * @return {*}\n\t   */\n\t\n\t\n\t  _createClass(DataCache, [{\n\t    key: \"getItem\",\n\t    value: function getItem(key) {\n\t      return this.cache[key];\n\t    }\n\t    /**\n\t     * 设置值\n\t     * @param {String} key\n\t     * @param {*} value\n\t     */\n\t\n\t  }, {\n\t    key: \"setItem\",\n\t    value: function setItem(key, value) {\n\t      this.cache[key] = value;\n\t    }\n\t    /**\n\t     * 删除一个值\n\t     * @param  {String} key\n\t     * @return {void}\n\t     */\n\t\n\t  }, {\n\t    key: \"removeItem\",\n\t    value: function removeItem(key) {\n\t      delete this.cache[key];\n\t    }\n\t  }]);\n\t\n\t  return DataCache;\n\t}();\n\t\n\texports.default = DataCache;\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** adm.jquery.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 704360d6146dad05103b\n **/","/**\n * @file 全局数据模型 model\n * 提供数据的读取、保存/缓存、删除、更新等操作。各模块 model 可继承该模型，以进行模块范围内的数据存取操作。\n * @module adm\n * @author lizhiwen@meizu.com\n * @since 2016-03-31 - 2016-08-16\n *\n * @example\n * import adm from 'ajax-data-model';\n * let upsModel = $.extend(true, {}, adm, {aa: 'ccc', restapi: {task_type: '/rest/task/type'}});\n * // 支持的方法：upsModel.get、upsModel.save、upsModel.delete、upsModel.clear\n * // 配置了 url，则都返回 Promise 对象，不管是否缓存\n * upsModel.get({url: '/rest/xxx'}).done().fail().then();\n * // 保存数据到 localStorage 中\n * upsModel.save('appList', [{music: 'test'}], 'localStorage');\n * // 通过名字获取，返回存储的数据或者 undefined\n * upsModel.get('appList');\n * upsModel.get('appList', 'localStorage');\n *\n * @example\n * // 获取 task_type 数据，并缓存到 sessionStorage。获取时优先从 sessionStorage 读取\n * DW.adm.get({\n *     url: upsModel.restapi.task_type,\n *     cache: 'sessionStorage',\n *     fromCache: 'sessionStorage',\n *     cacheName: 'task_dependType'\n * }).done((result) => {\n *     let taskTypeList = result.value || [];\n *     console.log(taskTypeList);\n * });\n */\n'use strict';\n\n// import $ from 'jquery';\n\nimport settings from './common/settings';\nimport {getCacheStor, deleteCacheDataByName, getCacheDataByName, saveTOCache, isString} from './common/cache-helper';\n\n/**\n * ajax 请求通用方法\n * @param {Object}   config - 请求参数配置\n * @param {String}   config.url - ajax url，必须存在，`config.ajaxParam` 中配置此参数无效\n * @param {Object}   config.ajaxParam - ajax 额外参数扩展，如涉及文件上传等\n * @param {Object}   config.data - ajax 请求的参数\n * @param {Object}   config.waiting - 用于传递给 settings.fnWaiting 方法使用的参数配置\n * @param {Object}   config.tipConfig[true] - ajax 出错时的提示配置。配置为 false 时，禁用全局的系统提示，包括 成功/出错/404/50x 等\n * @param {Object}   config.errAlert[true] - ajax error 时是否给出全局提示\n * @param {Function} callback - ajax 请求成功时回调\n * @param {Function} errCallback - ajax 请求失败或 code !== 200 时回调\n * @param {Object}   param - 传递给 ajax 请求的额外参数\n * @param {Function} fnCB - 请求到数据之后的立即回调方法，用于请求成功后需要前置处理的情况\n * @return {Object}  ajax - $.Deferred，用于自定义回调处理。注意：ajax 请求的 done/fail 回调，与 callback/errCallback 有区别，不会处理 code 是否为 200！\n */\nfunction requestAjax(config, callback, errCallback, fnCB) {\n    if (!config.url || typeof config.url !== 'string') {\n        console.trace('请求 URL API 不存在，或格式不对：', config.url);\n        return $.Deferred().reject('请求 URL API 不存在，或格式不对：', config.url);\n    }\n\n    // data.btnWaiting 的兼容，应使用 config.waiting 参数\n    if (config.data && config.data.btnWaiting) {\n        config.waiting = config.waiting || config.data.btnWaiting;\n        delete config.data.btnWaiting;\n    }\n\n    // ajax 请求前处理\n    if (config.waiting) {\n        settings.fnWaiting(config.waiting);\n    }\n\n    // jsonp 兼容\n    let dataType = 'json';\n\n    if (/^https?:\\/\\// .test(config.url) && config.url.search(window.location.host) === -1) {\n        dataType = 'jsonp';\n    }\n\n    // 请求前回调\n    if (settings.fnBeforeAjax) {\n        settings.fnBeforeAjax(config);\n    }\n\n    let ajax = $.ajax($.extend(true, {\n        type: 'GET',\n        dataType\n    }, config.ajaxParam, {\n        url: config.url,\n        data: config.data\n    })).done((result) => {\n        return settings.fnAjaxDone(result, (res) => {\n            if ($.isFunction(fnCB)) {\n                fnCB(result);\n            }\n\n            if ($.isFunction(callback)) {\n                callback(res);\n            }\n        }, errCallback, config);\n    }).fail((err) => {\n        settings.fnAjaxFail(err, config);\n\n        if ($.isFunction(errCallback)) {\n            errCallback(err);\n        }\n    }).always(() => {\n        if (config.waiting) {\n            settings.fnWaiting(config.waiting, true);\n        }\n    });\n\n    return ajax; // 返回 Promise 对象\n}\n\n/**\n * 全局数据模型 model\n * @alias module:adm\n * @type {Object}\n */\nexport default {\n    /**\n     * 数据获取，可为远程url、缓存等\n     * @param {Object} config 为字符串时，从缓存中读取数据，否则为从远程获取数据，参数如下：\n     * ```js\n     * {\n     *     url: '',\n     *     data: {},         // url 请求参数\n     *     cache: false,     // 配置了 url 获取数据时，是否缓存数据。可取值：`false/true/sessionStorage/localStorage`\n     *     fromCache: false, // 配置了 url，是否首先尝试从缓存中读取数据。可取值：`false/true/sessionStorage/localStorage`\n     *     cacheName: 'ddd', // 配置了 url，如果缓存数据，配置其名称，不配置则取值 url (/ 替换为 . 作为深度路径)\n     *     tipConfig: {delay: 2000} // ajax 出错时的提示配置。配置为 false 时，禁用全局的系统提示，包括 成功/出错/404/50x 等\n     *     errAlert: true    // ajax error 时是否给出全局提示\n     *     waiting: {}       // 按钮等待等配置，用于传递给 settings.fnWaiting 方法\n     *     ajaxParam: null   // ajax 额外参数扩展，如涉及文件上传等，需要修改部分参数。其中 url 参数无效，应当使用 config.url\n     * }\n     * ```\n     * @param {Object} callback 成功回调方法\n     * @param {Object} errCallback 从 url 获取时，失败后需要做一些处理的回调方法\n     * }\n     */\n    get(config, callback, errCallback) {\n        if (!config) {\n            return undefined;\n        }\n\n        let cacheName, cacheData, $promise = $.Deferred();\n\n        if (isString(config)) {\n            // 第一个参数为字符串，则为名称，直接返回对应值\n            cacheName = config;\n        }\n\n        // 配置了 url，从 url 中获取\n        if (config.url) {\n            cacheName = config.cacheName || config.url;\n            cacheData = getCacheDataByName(cacheName, config.fromCache);\n\n            // fromCache 为 true，尝试从缓存中获取数据\n            if (config.fromCache && cacheData) {\n                if ($.isFunction(callback)) {\n                    callback(cacheData);\n                }\n\n                $promise.resolve(cacheData);\n                // return cacheData; // 返回数据\n                return $promise; // 这里改了后不兼容旧的调用，应该注意 bug 的出现！\n            }\n\n            config.ajaxParam = $.extend(config.ajaxParam, {\n                type: 'GET'\n            });\n\n            return requestAjax(config, callback, errCallback, (result) => {\n                // cache 为 true，缓存数据\n                if (config.cache && Number(result.code) === 200) {\n                    this.save(cacheName, result, config.cache);\n                }\n            });\n        } else if (config.hasOwnProperty('url')) { // 配置了 url，但 url 值为空\n            console.trace('配置了 URL 参数，但值为空：', config);\n            $promise.reject('配置了 URL 参数，但值为空', config);\n        } else {\n            // 未配置 url，则必须配置 cacheName，或者 config 为字符串(作为cacheName)，从缓存中取得数据\n            if (!cacheName && config) {\n                cacheName = config.cacheName;\n            }\n            cacheData = getCacheDataByName(cacheName, config.fromCache || callback);\n\n            if ($.isFunction(callback)) {\n                callback(cacheData);\n            }\n\n            return cacheData;\n        }\n\n        return $promise;\n    },\n    /**\n     * 设置/存储数据\n     * @param {Object|String} config - 配置信息。也可以为字符串，则为需存储的数据名称。与 {@link module:adm~get} 的 config 参数相同\n     * @param {Function|Object} callback - 存储成功后回调方法。当 config 为字符串时，为需存储的数据，或方法执行后返回要存储的数据\n     * @param {Function|String} errCallback - 从 url 获取时，失败后需要做一些处理的回调方法。config 为字符串时，为 cacheType 类型\n     * @example\n     * // 存储数据到 localStorage，名称为 testdataName\n     * adm.save('testdataName', {test: 1}, 'localStorage');\n     * @example\n     * // 存储数据到远程，同时存储到 sessionStorage\n     * adm.save({url: '/rest/dd', data: {test: 1}, cache: 'sessionStorage'});\n     */\n    save(config, callback, errCallback) {\n        if (!config) {\n            return '';\n        }\n\n        let cacheName, cacheData, $promise = $.Deferred();\n\n        if (isString(config)) { // config 为字符串，则作为cacheName\n            cacheName = '' + config;\n            if ($.isFunction(callback)) { // 可以存储为回调方法执行后的结果\n                saveTOCache(cacheName, callback(), errCallback);\n            } else {\n                saveTOCache(cacheName, callback, errCallback);\n            }\n        } else if (config.url) { // 配置了 url，将数据存储到远程\n            config.ajaxParam = $.extend({\n                type: 'POST'\n            }, config.ajaxParam);\n\n            return requestAjax(config, callback, errCallback, (result) => {\n                if (config.cache) {\n                    cacheName = cacheName || config.url;\n                    // 远程存储成功了，本地也需缓存数据时\n                    saveTOCache(cacheName, result, config.cache);\n                }\n            });\n\n        } else if (config.hasOwnProperty('url')) { // 配置了url，但 url 值为空\n            console.trace('配置了 URL 参数，但值为空：', config);\n            $promise.reject('配置了 URL 参数，但值为空', config);\n        } else if (config.cacheName) { // 没有设置 url，但设置了 cacheName，则保存数据到本地\n            saveTOCache(config.cacheName, config.data, config.cache);\n\n            if ($.isFunction(callback)) {\n                callback(cacheData);\n            }\n        }\n\n        return $promise;\n    },\n    /**\n     * 删除一个数据\n     * @param {Object} config - 为字符串时，作为 cacheName 尝试从缓存中删除数据。否则格式如下：\n     * ```js\n     * {\n     *     url: '',       // 配置了 url，从远程删除数据，否则从缓存中删除\n     *     cache: false,  // 配置了 url，是否还尝试从缓存中删除数据。可取值：false/true/sessionStorage/localStorage\n     *     cacheName: ''  // 从缓存中删除数据时，提供其名称。\n     * }\n     * ```\n     */\n    delete(config, callback, errCallback) {\n        if (!config) {\n            return '';\n        }\n\n        let $promise = $.Deferred(),\n            cacheName;\n\n        if (isString(config) || config instanceof RegExp) {\n            // 第一个参数为字符串或正则，callback 就是 cacheType\n            deleteCacheDataByName(config, callback);\n            // 删除完成都返回执行成功\n            $promise.resolve();\n        } else if (config.url) {\n            // 配置了 url，从远程删除数据\n            return requestAjax(config, callback, errCallback, {\n                type: 'DELETE'\n            }, () => {\n                if (config.cache) {\n                    // 远程删除成功了，本地也需清空时\n                    cacheName = config.cacheName || config.url;\n                    deleteCacheDataByName(cacheName, config.cache);\n                }\n            });\n        } else if (config.hasOwnProperty('url')) { // 配置了url，但 url 值为空\n            console.trace('配置了 URL 参数，但值为空：', config);\n            $promise.reject('配置了 URL 参数，但值为空', config);\n        } else if (config && config.cacheName) {\n            deleteCacheDataByName(config.cacheName, config.cache);\n            $promise.resolve();\n        }\n\n        return $promise;\n    },\n    /**\n     * 返回所有存储中的所有数据\n     * @param  {String} cacheType 存储的类型：sessionStorage、localStorage 或 memory\n     * @return {Object}\n     */\n    getAll(cacheType) {\n        let cacheStor = getCacheStor(cacheType);\n        let item, key, _cache = {};\n\n        for (item in cacheStor) {\n            if (!cacheStor.hasOwnProperty(item)) {\n                continue;\n            }\n\n            if (0 !== item.indexOf(settings.cachePrefix)) {\n                continue;\n            }\n\n            key = item.replace(settings.cachePrefix, '');\n            try {\n                _cache[key] = JSON.parse(cacheStor[item]);\n            } catch (e) {\n                _cache[key] = cacheStor[item];\n            }\n        }\n\n        return _cache;\n    },\n    /**\n     * 根据存储类型清空存储的所有数据\n     * @param  {String} cacheType\n     * @return {scope} this\n     */\n    clear(cacheType) {\n        deleteCacheDataByName(new RegExp('.*'), cacheType);\n\n        return this;\n    },\n    /**\n     * 修改缓存数据的前缀\n     * @param {String} prefix           以下划线开头，由字母、数字、或下划线组成\n     * @param {Boolean} clear[=true]    修改前缀前，是否移除已有的数据\n     */\n    setCachePrefix(prefix, clear = true) {\n        if (!/^_[_a-zA-Z]*_$/.test(prefix)) {\n            console.warn('以下划线开头和结尾，由字母、数字、或下划线组成');\n            return this;\n        }\n\n        if (clear) {\n            this.clear('sessionStorage');\n            this.clear('localStorage');\n            this.clear();\n        }\n\n        settings.cachePrefix = prefix;\n\n        return this;\n    },\n    /**\n     * 设置配置项\n     * @param {Object} setting\n     */\n    setSettings(setting) {\n        let item;\n\n        for (item in setting) {\n            if ('cachePrefix' === item) {\n                this.setCachePrefix(setting[item], true);\n            } else if (settings.hasOwnProperty(item)) {\n                settings[item] = setting[item];\n            }\n        }\n\n        return settings;\n    }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/adm.jquery.js\n **/","/**\n * @desc 配置信息，可以通过 `adm.setSettings` 方法修改\n * @alias settings\n * @type {Object}\n */\nexport default {\n    cachePrefix: '__DM__', // 缓存数据时使用的前缀\n    alert: (msg) => {      // 全局性提示方法注册，可根据项目的 alert 组件进行注册\n        console.trace(msg);\n        // window.alert(msg);\n    },\n    /**\n     * ajax 开始/结束时的状态处理\n     * 例如单击按钮后，在开始时禁用按钮，结束时恢复它；\n     * 再例如，在 ajax 开始时启用页面动画，结束时关闭页面动画。\n     * @param  {Object}  wait - 来自于 `data.btnWaiting` 参数，参数内容可根据 `fnWaiting` 具体的处理来设置。例如这里为：\n     * `{$btn:$btn, text:\"请求中..\", defaultText: \"提交\"}`\n     * @param  {Boolean} isEnd - true 时在 ajax 开始调用；为 false 时在 ajax 结束调用\n     * @return {void}\n     */\n    fnWaiting(wait, isEnd) {\n        if (wait && wait.$btn && wait.$btn.length) {\n            if (!isEnd) {\n                wait.$btn.data('defaultText', wait.$btn.html())\n                    .html(wait.text || '<i class=\"fa fa-spinner rotateIn animated infinite\"></i> 请求中...')\n                    .addClass('disabled').prop('disabled', true);\n            } else {\n                setTimeout(function () {\n                    // 连续提交延时处理，两次连续提交不能超过 200 ms\n                    wait.$btn.html(wait.defaultText || wait.$btn.data('defaultText'))\n                        .removeClass('disabled').prop('disabled', false);\n                }, 200);\n            }\n        }\n    },\n    /**\n     * ajax 请求前回调方法\n     * @param  {Object} config - ajax 请求配置，由于是引用传参，可在这里通过修改它实现 mock 数据等功能\n     * @return {void}\n     */\n    fnBeforeAjax(config) {},\n    /**\n     * 通用 ajax 请求返回处理\n     * 对于接口的约定，如这里以 `code` 为 `200` 认为是成功的数据，否则为出错\n     * @param {Object} result - ajax 返回的数据结果\n     * @param {Function} callback - 成功回调方法\n     * @param {Function} errCallback - 出错回调方法\n     * @param {Object} config - ajax 请求参数配置，即 `adm.get/save` 的第一个参数\n     */\n    fnAjaxDone(result, callback, errCallback, config) {\n        let $d = $.Deferred();\n\n        if (result && result.code === 200) {\n            if (callback) {\n                callback(result);\n            }\n\n            // code 200 认为成功，否则认为失败\n            $d.resolve(result);\n        } else {\n            $d.reject(result);\n\n            if (errCallback) {\n                errCallback(result);\n            }\n\n            // 设置为 false，则不进行系统提示，适合由用户自定义错误处理的情况\n            if (config.tipConfig === false) {\n                return $d;\n            }\n\n            result.message = result.message || '系统错误';\n            if (config.tipConfig) {\n                // 注册另一种系统提示\n                // config.tipConfig.message = result.message;\n                // MZ.tipmessage.fail(config.tipConfig);\n            } else {\n                this.alert(result.message);\n            }\n        }\n\n        return $d;\n    },\n    /**\n     * ajax 失败处理，一般为 30x、40x、50x 或返回格式不对、网络中断等\n     * @param  {Object} err\n     * @param  {Object} config\n     * @return {void}\n     */\n    fnAjaxFail(err, config) {\n        if (0 === err.status) {\n            this.alert('登录超时');\n            window.location.reload();\n        } else if (false !== config.errAlert) {\n            // errAlert = false 时禁止 40x/50x 等错误的全局提示\n            this.alert('数据请求失败: ' + (err.responseText || err.statusText));\n        }\n    }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/common/settings.js\n **/","/**\n * cache helper\n */\nimport settings from './settings';\nimport DataCache from './DataCache';\n\n// 缓存数据对象。为了避免混淆，只缓存至一级结构\nconst dataCache = new DataCache();\n\n/**\n * 修正 cacheName\n * @param  {String} cacheName 原始的值，可能是任意格式\n * @return {String}           修正后的 cacheName，以 cachePrefix 开头\n */\nfunction adjustCacheName(cacheName) {\n    if (!cacheName) {\n        return '';\n    }\n\n    cacheName = encodeURIComponent(('' + cacheName).replace(/\\//g, '.').replace(/^\\./, '').replace(/(^\\s+|\\s+$)/g, ''));\n    if (cacheName.indexOf(settings.cachePrefix) !== 0) {\n        cacheName = settings.cachePrefix + cacheName;\n    }\n\n    return cacheName;\n}\n/**\n * 根据 cacheType 取得 cacheStorage 对象\n * @param  {String} cacheType\n * @return {Object}\n */\nexport function getCacheStor(cacheType) {\n    let cacheStor = dataCache;\n\n    if ('sessionStorage' === cacheType || 'localStorage' === cacheType) {\n        cacheStor = window[cacheType] || dataCache;\n    }\n\n    return cacheStor;\n}\n/**\n * 根据 cacheName 名称层级获取对应 dataCache 中的缓存数据\n * @param  {String} cacheName - 名称，以 . 分割层级，如 ups.pa.query.tags.group\n * @param  {String} cacheType - 缓存类型：sessionStorage、localStorage 、 memory(默认)\n * @return {*}                  返回读取到的数据\n */\nexport function getCacheDataByName(cacheName, cacheType) {\n    let data, cacheStor = getCacheStor(cacheType);\n\n    if (!(cacheName = adjustCacheName(cacheName))) {\n        return data;\n    }\n\n    try {\n        data = JSON.parse(cacheStor.getItem(cacheName));\n    } catch (e) {\n        data = cacheStor.getItem(cacheName);\n    }\n\n    return data || undefined;\n}\n/**\n * 根据 cacheName 名称尝试移除缓存中存在的数据\n * @param  {String|RegExp}  cacheName - 名称，以 . 分割层级，如 ups.pa.query.tags.group。支持正则匹配\n * @param  {String} cacheType - 缓存类型：sessionStorage、localStorage 、 memory(默认)\n * @return {*}\n */\nexport function deleteCacheDataByName(cacheName, cacheType) {\n    let item,\n        cacheStor = getCacheStor(cacheType);\n\n    // 为正则，支持模糊删除\n    if (cacheName instanceof RegExp) {\n        for (item in cacheStor) {\n            if (!cacheStor.hasOwnProperty(item) || // 自有属性\n                item.indexOf(settings.cachePrefix) !== 0     // 过滤前缀\n            ) {\n                continue;\n            }\n\n            // 规则检测\n            if (!cacheName.test(item.slice(settings.cachePrefix.length))) {\n                continue;\n            }\n\n            // 符合规则，移除\n            cacheStor.removeItem(item);\n        }\n\n        return;\n    }\n\n    // 精确的查找与删除\n    if (!(cacheName = adjustCacheName(cacheName))) {\n        return;\n    }\n\n    cacheStor.removeItem(cacheName);\n}\n/**\n * 存储数据到本地\n * @param {String} cacheName - 用于存储的名称\n * @param {*}      data - 任意类型的数据\n * @param {String} cacheType - 存储类型，支持三种方式：sessionStorage、localStorage 和内存中(默认)\n */\nexport function saveTOCache(cacheName, data, cacheType) {\n    if (!(cacheName = adjustCacheName(cacheName))) {\n        return;\n    }\n\n    let cacheStor = getCacheStor(cacheType);\n\n    if (cacheStor === dataCache) {\n        // 存到内存 dataCache\n        dataCache[cacheName] = data;\n    } else {\n        cacheStor.setItem(cacheName, JSON.stringify(data));\n    }\n}\n\n/**\n * 是否为类字符串\n */\nexport function isString(text) {\n    let type = typeof text;\n\n    if ('string' === type || 'number' === type) {\n        return true;\n    }\n    return false;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/common/cache-helper.js\n **/","/**\n * @file 基本的数据缓存类\n */\n\n/**\n * 内存缓存数据对象类，与 `localStorage` API 保持一致\n */\nclass DataCache {\n    constructor() {\n        this.cache = {};\n    }\n    /**\n     * 获取值\n     * @param  {String} key\n     * @return {*}\n     */\n    getItem(key) {\n        return this.cache[key];\n    }\n    /**\n     * 设置值\n     * @param {String} key\n     * @param {*} value\n     */\n    setItem(key, value) {\n        this.cache[key] = value;\n    }\n    /**\n     * 删除一个值\n     * @param  {String} key\n     * @return {void}\n     */\n    removeItem(key) {\n        delete this.cache[key];\n    }\n}\n\nexport default DataCache;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/common/DataCache.js\n **/"],"sourceRoot":""}